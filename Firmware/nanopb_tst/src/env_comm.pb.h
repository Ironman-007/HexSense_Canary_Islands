/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_ENV_COMM_PB_H_INCLUDED
#define PB_ENV_COMM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _Env_cmd_frame_cmd {
    Env_cmd_frame_cmd_START = 0,
    Env_cmd_frame_cmd_PING = 1
} Env_cmd_frame_cmd;

typedef enum _Env_ack_frame_ack {
    Env_ack_frame_ack_ACK = 0,
    Env_ack_frame_ack_NCK = 1
} Env_ack_frame_ack;

/* Struct definitions */
typedef struct _Env_data_frame {
    int32_t ID;
    int32_t time_stamp;
    int32_t seq_num;
    float temperature;
    float co2_level;
    float humidity;
    int32_t crc;
} Env_data_frame;

typedef struct _Env_cmd_frame {
    int32_t ID;
    int32_t crc;
} Env_cmd_frame;

typedef struct _Env_ack_frame {
    int32_t ID;
    int32_t crc;
} Env_ack_frame;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _Env_cmd_frame_cmd_MIN Env_cmd_frame_cmd_START
#define _Env_cmd_frame_cmd_MAX Env_cmd_frame_cmd_PING
#define _Env_cmd_frame_cmd_ARRAYSIZE ((Env_cmd_frame_cmd)(Env_cmd_frame_cmd_PING+1))

#define _Env_ack_frame_ack_MIN Env_ack_frame_ack_ACK
#define _Env_ack_frame_ack_MAX Env_ack_frame_ack_NCK
#define _Env_ack_frame_ack_ARRAYSIZE ((Env_ack_frame_ack)(Env_ack_frame_ack_NCK+1))





/* Initializer values for message structs */
#define Env_data_frame_init_default              {0, 0, 0, 0, 0, 0, 0}
#define Env_cmd_frame_init_default               {0, 0}
#define Env_ack_frame_init_default               {0, 0}
#define Env_data_frame_init_zero                 {0, 0, 0, 0, 0, 0, 0}
#define Env_cmd_frame_init_zero                  {0, 0}
#define Env_ack_frame_init_zero                  {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Env_data_frame_ID_tag                    1
#define Env_data_frame_time_stamp_tag            2
#define Env_data_frame_seq_num_tag               3
#define Env_data_frame_temperature_tag           4
#define Env_data_frame_co2_level_tag             5
#define Env_data_frame_humidity_tag              6
#define Env_data_frame_crc_tag                   7
#define Env_cmd_frame_ID_tag                     1
#define Env_cmd_frame_crc_tag                    2
#define Env_ack_frame_ID_tag                     1
#define Env_ack_frame_crc_tag                    2

/* Struct field encoding specification for nanopb */
#define Env_data_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    ID,                1) \
X(a, STATIC,   SINGULAR, INT32,    time_stamp,        2) \
X(a, STATIC,   SINGULAR, INT32,    seq_num,           3) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       4) \
X(a, STATIC,   SINGULAR, FLOAT,    co2_level,         5) \
X(a, STATIC,   SINGULAR, FLOAT,    humidity,          6) \
X(a, STATIC,   SINGULAR, INT32,    crc,               7)
#define Env_data_frame_CALLBACK NULL
#define Env_data_frame_DEFAULT NULL

#define Env_cmd_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    ID,                1) \
X(a, STATIC,   SINGULAR, INT32,    crc,               2)
#define Env_cmd_frame_CALLBACK NULL
#define Env_cmd_frame_DEFAULT NULL

#define Env_ack_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    ID,                1) \
X(a, STATIC,   SINGULAR, INT32,    crc,               2)
#define Env_ack_frame_CALLBACK NULL
#define Env_ack_frame_DEFAULT NULL

extern const pb_msgdesc_t Env_data_frame_msg;
extern const pb_msgdesc_t Env_cmd_frame_msg;
extern const pb_msgdesc_t Env_ack_frame_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Env_data_frame_fields &Env_data_frame_msg
#define Env_cmd_frame_fields &Env_cmd_frame_msg
#define Env_ack_frame_fields &Env_ack_frame_msg

/* Maximum encoded size of messages (where known) */
#define ENV_COMM_PB_H_MAX_SIZE                   Env_data_frame_size
#define Env_ack_frame_size                       22
#define Env_cmd_frame_size                       22
#define Env_data_frame_size                      59

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
