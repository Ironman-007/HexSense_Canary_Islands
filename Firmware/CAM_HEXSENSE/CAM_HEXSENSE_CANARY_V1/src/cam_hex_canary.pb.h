/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_CAM_HEX_CANARY_PB_H_INCLUDED
#define PB_CAM_HEX_CANARY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _CMD_RECV {
    CMD_RECV_START = 0,
    CMD_RECV_AGAIN = 1,
    CMD_RECV_INVALID = 3
} CMD_RECV;

typedef enum _ACK2SEND {
    ACK2SEND_ACK = 0,
    ACK2SEND_NCK = 1
} ACK2SEND;

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(100) CAM_HEX_camera_data_frame_CAM_data_t;
typedef struct _CAM_HEX_camera_data_frame {
    int32_t seq_num;
    CAM_HEX_camera_data_frame_CAM_data_t CAM_data;
    int32_t crc;
} CAM_HEX_camera_data_frame;

typedef struct _CAM_HEX_cmd_frame {
    CMD_RECV cmd_recv;
    int32_t crc;
} CAM_HEX_cmd_frame;

typedef struct _CAM_HEX_ack_frame {
    CMD_RECV cmd_recv;
    ACK2SEND ack2send;
    int32_t crc;
} CAM_HEX_ack_frame;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CMD_RECV_MIN CMD_RECV_START
#define _CMD_RECV_MAX CMD_RECV_INVALID
#define _CMD_RECV_ARRAYSIZE ((CMD_RECV)(CMD_RECV_INVALID+1))

#define _ACK2SEND_MIN ACK2SEND_ACK
#define _ACK2SEND_MAX ACK2SEND_NCK
#define _ACK2SEND_ARRAYSIZE ((ACK2SEND)(ACK2SEND_NCK+1))


#define CAM_HEX_cmd_frame_cmd_recv_ENUMTYPE CMD_RECV

#define CAM_HEX_ack_frame_cmd_recv_ENUMTYPE CMD_RECV
#define CAM_HEX_ack_frame_ack2send_ENUMTYPE ACK2SEND


/* Initializer values for message structs */
#define CAM_HEX_camera_data_frame_init_default   {0, {0, {0}}, 0}
#define CAM_HEX_cmd_frame_init_default           {_CMD_RECV_MIN, 0}
#define CAM_HEX_ack_frame_init_default           {_CMD_RECV_MIN, _ACK2SEND_MIN, 0}
#define CAM_HEX_camera_data_frame_init_zero      {0, {0, {0}}, 0}
#define CAM_HEX_cmd_frame_init_zero              {_CMD_RECV_MIN, 0}
#define CAM_HEX_ack_frame_init_zero              {_CMD_RECV_MIN, _ACK2SEND_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define CAM_HEX_camera_data_frame_seq_num_tag    1
#define CAM_HEX_camera_data_frame_CAM_data_tag   2
#define CAM_HEX_camera_data_frame_crc_tag        3
#define CAM_HEX_cmd_frame_cmd_recv_tag           1
#define CAM_HEX_cmd_frame_crc_tag                2
#define CAM_HEX_ack_frame_cmd_recv_tag           1
#define CAM_HEX_ack_frame_ack2send_tag           2
#define CAM_HEX_ack_frame_crc_tag                3

/* Struct field encoding specification for nanopb */
#define CAM_HEX_camera_data_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    seq_num,           1) \
X(a, STATIC,   SINGULAR, BYTES,    CAM_data,          2) \
X(a, STATIC,   SINGULAR, INT32,    crc,               3)
#define CAM_HEX_camera_data_frame_CALLBACK NULL
#define CAM_HEX_camera_data_frame_DEFAULT NULL

#define CAM_HEX_cmd_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    cmd_recv,          1) \
X(a, STATIC,   SINGULAR, INT32,    crc,               2)
#define CAM_HEX_cmd_frame_CALLBACK NULL
#define CAM_HEX_cmd_frame_DEFAULT NULL

#define CAM_HEX_ack_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    cmd_recv,          1) \
X(a, STATIC,   SINGULAR, UENUM,    ack2send,          2) \
X(a, STATIC,   SINGULAR, INT32,    crc,               3)
#define CAM_HEX_ack_frame_CALLBACK NULL
#define CAM_HEX_ack_frame_DEFAULT NULL

extern const pb_msgdesc_t CAM_HEX_camera_data_frame_msg;
extern const pb_msgdesc_t CAM_HEX_cmd_frame_msg;
extern const pb_msgdesc_t CAM_HEX_ack_frame_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CAM_HEX_camera_data_frame_fields &CAM_HEX_camera_data_frame_msg
#define CAM_HEX_cmd_frame_fields &CAM_HEX_cmd_frame_msg
#define CAM_HEX_ack_frame_fields &CAM_HEX_ack_frame_msg

/* Maximum encoded size of messages (where known) */
#define CAM_HEX_CANARY_PB_H_MAX_SIZE             CAM_HEX_camera_data_frame_size
#define CAM_HEX_ack_frame_size                   15
#define CAM_HEX_camera_data_frame_size           124
#define CAM_HEX_cmd_frame_size                   13

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
