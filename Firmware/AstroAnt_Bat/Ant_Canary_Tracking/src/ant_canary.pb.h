/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_ANT_CANARY_PB_H_INCLUDED
#define PB_ANT_CANARY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _Ant_cmd_frame_cmd {
    Ant_cmd_frame_cmd_START = 0,
    Ant_cmd_frame_cmd_PING = 1,
    Ant_cmd_frame_cmd_TAKEIR = 2
} Ant_cmd_frame_cmd;

typedef enum _Ant_ack_frame_ack {
    Ant_ack_frame_ack_ACK = 0,
    Ant_ack_frame_ack_NCK = 1
} Ant_ack_frame_ack;

/* Struct definitions */
typedef struct _Ant_tracking_data_frame {
    int32_t ID;
    int32_t time_stamp;
    int32_t seq_num;
    float battery_v;
    float encoder_cnt;
    float gyro_data;
    int32_t crc;
} Ant_tracking_data_frame;

typedef PB_BYTES_ARRAY_T(100) Ant_IR_data_frame_IR_data_t;
typedef struct _Ant_IR_data_frame {
    int32_t ID;
    int32_t time_stamp;
    int32_t seq_num;
    float battery_v;
    Ant_IR_data_frame_IR_data_t IR_data;
    int32_t crc;
} Ant_IR_data_frame;

typedef struct _Ant_cmd_frame {
    int32_t ID;
    int32_t crc;
} Ant_cmd_frame;

typedef struct _Ant_ack_frame {
    int32_t ID;
    int32_t crc;
} Ant_ack_frame;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _Ant_cmd_frame_cmd_MIN Ant_cmd_frame_cmd_START
#define _Ant_cmd_frame_cmd_MAX Ant_cmd_frame_cmd_TAKEIR
#define _Ant_cmd_frame_cmd_ARRAYSIZE ((Ant_cmd_frame_cmd)(Ant_cmd_frame_cmd_TAKEIR+1))

#define _Ant_ack_frame_ack_MIN Ant_ack_frame_ack_ACK
#define _Ant_ack_frame_ack_MAX Ant_ack_frame_ack_NCK
#define _Ant_ack_frame_ack_ARRAYSIZE ((Ant_ack_frame_ack)(Ant_ack_frame_ack_NCK+1))






/* Initializer values for message structs */
#define Ant_tracking_data_frame_init_default     {0, 0, 0, 0, 0, 0, 0}
#define Ant_IR_data_frame_init_default           {0, 0, 0, 0, {0, {0}}, 0}
#define Ant_cmd_frame_init_default               {0, 0}
#define Ant_ack_frame_init_default               {0, 0}
#define Ant_tracking_data_frame_init_zero        {0, 0, 0, 0, 0, 0, 0}
#define Ant_IR_data_frame_init_zero              {0, 0, 0, 0, {0, {0}}, 0}
#define Ant_cmd_frame_init_zero                  {0, 0}
#define Ant_ack_frame_init_zero                  {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Ant_tracking_data_frame_ID_tag           1
#define Ant_tracking_data_frame_time_stamp_tag   2
#define Ant_tracking_data_frame_seq_num_tag      3
#define Ant_tracking_data_frame_battery_v_tag    4
#define Ant_tracking_data_frame_encoder_cnt_tag  5
#define Ant_tracking_data_frame_gyro_data_tag    6
#define Ant_tracking_data_frame_crc_tag          7
#define Ant_IR_data_frame_ID_tag                 1
#define Ant_IR_data_frame_time_stamp_tag         2
#define Ant_IR_data_frame_seq_num_tag            3
#define Ant_IR_data_frame_battery_v_tag          4
#define Ant_IR_data_frame_IR_data_tag            5
#define Ant_IR_data_frame_crc_tag                6
#define Ant_cmd_frame_ID_tag                     1
#define Ant_cmd_frame_crc_tag                    2
#define Ant_ack_frame_ID_tag                     1
#define Ant_ack_frame_crc_tag                    2

/* Struct field encoding specification for nanopb */
#define Ant_tracking_data_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    ID,                1) \
X(a, STATIC,   SINGULAR, INT32,    time_stamp,        2) \
X(a, STATIC,   SINGULAR, INT32,    seq_num,           3) \
X(a, STATIC,   SINGULAR, FLOAT,    battery_v,         4) \
X(a, STATIC,   SINGULAR, FLOAT,    encoder_cnt,       5) \
X(a, STATIC,   SINGULAR, FLOAT,    gyro_data,         6) \
X(a, STATIC,   SINGULAR, INT32,    crc,               7)
#define Ant_tracking_data_frame_CALLBACK NULL
#define Ant_tracking_data_frame_DEFAULT NULL

#define Ant_IR_data_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    ID,                1) \
X(a, STATIC,   SINGULAR, INT32,    time_stamp,        2) \
X(a, STATIC,   SINGULAR, INT32,    seq_num,           3) \
X(a, STATIC,   SINGULAR, FLOAT,    battery_v,         4) \
X(a, STATIC,   SINGULAR, BYTES,    IR_data,           5) \
X(a, STATIC,   SINGULAR, INT32,    crc,               6)
#define Ant_IR_data_frame_CALLBACK NULL
#define Ant_IR_data_frame_DEFAULT NULL

#define Ant_cmd_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    ID,                1) \
X(a, STATIC,   SINGULAR, INT32,    crc,               2)
#define Ant_cmd_frame_CALLBACK NULL
#define Ant_cmd_frame_DEFAULT NULL

#define Ant_ack_frame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    ID,                1) \
X(a, STATIC,   SINGULAR, INT32,    crc,               2)
#define Ant_ack_frame_CALLBACK NULL
#define Ant_ack_frame_DEFAULT NULL

extern const pb_msgdesc_t Ant_tracking_data_frame_msg;
extern const pb_msgdesc_t Ant_IR_data_frame_msg;
extern const pb_msgdesc_t Ant_cmd_frame_msg;
extern const pb_msgdesc_t Ant_ack_frame_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Ant_tracking_data_frame_fields &Ant_tracking_data_frame_msg
#define Ant_IR_data_frame_fields &Ant_IR_data_frame_msg
#define Ant_cmd_frame_fields &Ant_cmd_frame_msg
#define Ant_ack_frame_fields &Ant_ack_frame_msg

/* Maximum encoded size of messages (where known) */
#define ANT_CANARY_PB_H_MAX_SIZE                 Ant_IR_data_frame_size
#define Ant_IR_data_frame_size                   151
#define Ant_ack_frame_size                       22
#define Ant_cmd_frame_size                       22
#define Ant_tracking_data_frame_size             59

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
